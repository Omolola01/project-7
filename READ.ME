# Project 7-  Devops Tooling Website Solution

Open 5 instances : 1 NFS, 3 Webserver, 1 database
Create a volume and attach it your NFS

ssh into your NFS instance 
### Configure Lvm 
`lsblk'
`

`sudo gdisk /dev/xvdf`
`sudo gdisk /dev/xvdg`
`sudo gdisk /dev/xvdh`

`sudo yum install lvm2 -y`

`sudo lvmdiskscan` to check for availiable partition

`sudo pvcreate /dev/xvdf1`
`sudo pvcreate /dev/xvdg1`
`sudo pvcreate /dev/xvdh1`

`sudo pvs` To check your volume group

`sudo vgcreate webdata-vg /dev/xvdf1 /dev/xvdg1 /dev/xvdh1` To create a volume group

`sudo vgs`

`sudo lvcreate -n lv-apps -L 9G webdata-vg`
`sudo lvcreate -n lv-logs -L 9G webdata-vg`
`sudo lvcreate -n lv-opt -L 9G webdata-vg`

`sudo lvs`
`lsblk`
`sudo vgdisplay -v #view complete setup - VG, PV, and LV`

#Formating the disks as xfs `sudo mkfs -t xfs /dev/webdata-vg/lv-apps`

`sudo mkfs -t xfs /dev/webdata-vg/lv-opt`

` sudo mkfs -t xfs /dev/webdata-vg/lv-logs`
`sudo mkfs -t xfs /dev/webdata-vg/lv-apps`

`sudo mkdir /mnt/apps` `sudo mkdir /mnt/opt` `sudo mkdir /mnt/logs`

#Create mount points on /mnt directory for the logical volumes
`sudo mount /dev/webdata-vg/lv-apps /mnt/apps`
`sudo mount /dev/webdata-vg/lv-logs /mnt/logs`
`sudo mount /dev/webdata-vg/lv-opt /mnt/opt`

#Install NFS server, configure it to start on reboot and make sure it is u and running
`sudo yum -y update`
`sudo yum install nfs-utils -y`
`sudo systemctl start nfs-server.service`
`sudo systemctl enable nfs-server.service`
`sudo systemctl status nfs-server.service`
![Nfs-status](./Images/nfs-status.PNG)

#Set up permission that will allow our Web servers to read, write and execute files on NFS
`sudo chown -R nobody: /mnt/apps`
`sudo chown -R nobody: /mnt/logs`
`sudo chown -R nobody: /mnt/opt`

`sudo chmod -R 777 /mnt/apps`
`sudo chmod -R 777 /mnt/logs`
`sudo chmod -R 777 /mnt/opt`

`sudo systemctl restart nfs-server.service`

#Configure access to NFS for clients within the same subnet: Use IPV4 CIDR OF NFS as subnet
`sudo vi /etc/exports`

/mnt/apps <Subnet-CIDR>(rw,sync,no_all_squash,no_root_squash)
/mnt/logs <Subnet-CIDR>(rw,sync,no_all_squash,no_root_squash)
/mnt/opt <Subnet-CIDR>(rw,sync,no_all_squash,no_root_squash)

sudo exportfs -arv  so that webserver will see it when they want to connect

#Check which port is used by NFS and open it using Security Groups (add new Inbound Rule)
rpcinfo -p | grep nfs
![tcp](./Images/tcp-grep.PNG)
![Port](./Images/udp.PNG)


## Database Configuration
#Launch into database instance
 `sudo apt install mysql-server -y`
 `sudo mysql`
 `create database tooling;`
 `create user 'webaccess'@'webserver ipv4 cidr' identified by 'password';`
 ` grant all privileges on tooling.* to 'webaccess'@'webserver ipv4 cidr';`
 `flush privileges;`
 `show databases;` to show database
 `use tooling;`

 ## Webserver
 The followig steps should be done on the 3 webserver instance
`sudo yum install nfs-utils nfs4-acl-tools -y` Install NFS client

#Mount /var/www/ and target the NFS server’s export for apps
 `sudo mkdir /var/www`

 `sudo mount -t nfs -o rw,nosuid <NFS-Server-Private-IP-Address>:/mnt/apps /var/www`
 `df -h` to verify if nfs was properly mounted succesfully
 `sudo vi /etc/fstab`
 <NFS-Server-Private-IP-Address>:/mnt/apps /var/www nfs defaults 0 0

 sudo yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm -y orsudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm 
   sudo yum install yum-utils http://rpms.remirepo.net/enterprise/remi-release-8.rpm or sudo dnf update system-release
   `sudo yum install httpd -y`
   `sudo yum module list php`    
    `sudo yum module reset php`
    `sudo yum module enable php`
    `sudo yum install php php-opcache php-gd php-curl php-mysqlnd`
    `sudo systemctl start php-fpm`
    `sudo systemctl enable php-fpm`
    `sudo systemctl status php-fpm`
    `sudo setsebool -P httpd_execmem 1`
    
#Do this for the  two remaining webserver

  `sudo yum install httpd -y`

 `sudo ls /var/log/httpd to check for apache log file`

 `sudo mount -t nfs -o rw,nosuid NFS-SERVER-PRIVATE-ID:/mnt/logs /var/log/httpd`
 `sudo vi /etc/fstab`
 <NFS-Server-Private-IP-Address>:/mnt/logs /var/www nfs defaults 0 0

#Fork the tooling source code from [here](https://github.com/darey-io/tooling)

 `sudo yum install git`  to install git
  `git init`
  `git clone https://github.com/darey-io/tooling.git`

 `ls`
 `cd tooling`
 `ls /var/www  to check ap`

  `sudo cp -R html/. /var/www/html`

  #To confirm the copy
  `ls /var/www/html`
    `ls html`

  #open port 80
  ![port 80](./Images/port-80.PNG)
  #open webserver ip on browser, If it doesn't work, check if apache is running, if not
  ![Browser-image](./Images/browser-end.PNG)


   `sudo setenforce 0`
   `sudo vi /etc/sysconfig/selinux`
  set SELINUX=disabled

 #Update the website’s configuration to connect to the database
  `sudo vi /var/www/html/functions.php` to Apply tooling-db.sql script to your database using this command
 $db = mysqli_connect('database-private-ip', 'webaccess', 'password', 'tooling');
 ![configuration image](./Images/configuration.PNG)

  `cd tooling`
  `sudo yum install mysql`
   `mysql -h 172.31.32.247 -u webaccess -p tooling < tooling-db.sql`

#If you have issues when loging t your user in mysql
Add mysql/aurora on  webserver
   ![Mysql-aurorq](./Images/aurora.PNG)
   `sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf`
   change the bind address and mysql address to 0.0.0.0

    #In webserver 
    `sudo mv /etc/httpd/conf.d/welcome.conf /etc/httpd/conf.d/welcome.backup`

   ![index page](./Images/index.PNG)

#Create in MySQL a new admin user with username and password
#INSERT INTO ‘users’ (‘id’, ‘username’, ‘password’, ’email’, ‘user_type’, ‘status’) VALUES
-> (1, ‘myuser’, ‘5f4dcc3b5aa765d61d8327deb882cf99’, ‘user@mail.com’, ‘admin’, ‘1’);

Open the website in your browser http://<Web-Server-Public-IP-Address/index.php
Make sure you can login into the websute with myuser user.![alt text](image.jpg)

![wordpress-image](./Images/wordpress-image.PNG)
![login page](./Images/log-in.PNG)

## Project 8: CONFIGURE APACHE AS A LOAD BALANCER

#Continuing from previous project
#Create an Ubuntu Server 20.04 EC2 instance and name it Project-8-apache-lb
#ssh into instance
#Open TCP port 80 on Project-8-apache-lb 

#Install load balancer 
 `sudo apt update`
 `sudo apt install apache2 -y`
 `sudo apt-get install libxml2-dev`

#Install its dependencies
 `sudo a2enmod rewrite`
 `sudo a2enmod proxy`
 `sudo a2enmod proxy_balancer`
 `sudo a2enmod proxy_http`
 `sudo a2enmod headers`
 `sudo a2enmod lbmethod_bytraffic`
 `sudo systemctl restart apache2`

 #Make sure apache is running
  `sudo systemctl status apache2`

 #configure load balancing
 `sudo vi /etc/apache2/sites-available/000-default.conf`

#Add this configuration into this section <VirtualHost *:80>  </VirtualHost>

<Proxy "balancer://mycluster">
               BalancerMember http://<WebServer1-Private-IP-Address>:80 loadfactor=5 timeout=1
               BalancerMember http://<WebServer2-Private-IP-Address>:80 loadfactor=5 timeout=1
               ProxySet lbmethod=bytraffic
               # ProxySet lbmethod=byrequests
        </Proxy>

        ProxyPreserveHost On
        ProxyPass / balancer://mycluster/
        ProxyPassReverse / balancer://mycluster/

#Restart apache server
  `sudo systemctl restart apache2`

#Verify that our configuration works – try to access your LB’s public IP address or Public DNS name from your browser
http://<Load-Balancer-Public-IP-Address-or-Public-DNS-Name>/index.php
![login.php](./Images/index-page.PNG)

#If in the Project-7 you mounted /var/log/httpd/ from your Web Servers to the NFS server – unmount them and make sure that each Web Server has its own log directory.
  `sudo tail -f /var/log/httpd/access_log`

#Try to refresh your browser page http://<Load-Balancer-Public-IP-Address-or-Public-DNS-Name>/index.php several times and make sure that both servers receive HTTP GET requests from your LB – new records must appear in each server’s log file.
![request](./Images/request.PNG)


#configure local dns name resolution in your load balancer vm
  `sudo vi /etc/hosts`
  #Add 2 records into this file with Local IP address and arbitrary name for both of your Web Servers

<WebServer1-Private-IP-Address> Web1
<WebServer2-Private-IP-Address> Web2

#update your LB config file
   `sudo vi /etc/apache2/sites-available/000-default.conf`
 BalancerMember http://Web1:80 loadfactor=5 timeout=1
 BalancerMember http://Web2:80 loadfactor=5 timeout=1

 ![lb-configuration](./Images/lb-config.PNG)


#You can try to curl your Web Servers from LB locally
curl http://Web1 or curl http://Web2
![curl](./Images/curl.PNG)


